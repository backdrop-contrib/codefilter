<?php
// $Id$

/**
 * Implementation of hook_help()
 */
function codefilter_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t("Provides tags for escaping large pieces of code automatically.");
  }
}

/**
 * Implementation of hook_filter_tips()
 */
function codefilter_filter_tips($delta, $format, $long = false) {
  if ($long) {
    return t('To post pieces of code, surround them with &lt;code&gt;...&lt;/code&gt; tags. For PHP code, you can use &lt;?php ... ?&gt;, which will also colour it based on syntax.');
  }
  else {
    return t('You may post code using &lt;code&gt;...&lt;/code&gt; (generic) or &lt;?php ... ?&gt; (highlighted PHP) tags.');
  }
}

/**
 * Implementation of hook_menu()
 */
function codefilter_menu($may_cache) {
  if (!$may_cache) {
    theme('add_style', drupal_get_path('module', 'codefilter') . '/codefilter.css');
  }
}

/**
 * Processes chunks of escaped PHP code into HTML.
 */
function codefilter_process_php($text) {
  // Note, pay attention to odd preg_replace-with-/e behaviour on slashes
  // Undo possible linebreak filter conversion
  $text = preg_replace('@</?(br|p)\s*/?>@', '', str_replace('\"', '"', $text));
  // Undo the escaping in the prepare step
  $text = decode_entities($text);
  // Trim leading and trailing linebreaks
  $text = trim($text, "\r\n");
  // Highlight as PHP
  $text = '<div class="codeblock">'. highlight_string("<?php\n$text\n?>", 1) .'</div>';
  // Remove newlines to avoid clashing with the linebreak filter
  $text = str_replace(array("\r", "\n"), array('', ''), $text);
  return codefilter_fix_spaces($text);
}

/**
 * Helper function for codefilter_process_code().
 */
function codefilter_process_php_inline($matches) {
  // Undo nl2br
  $text = str_replace('<br />', '', $matches[0]);
  // Decode entities (the highlighter re-entifies) and highlight text
  $text = highlight_string(decode_entities($text), 1);
  // Remove PHP's own added code tags
  $text = str_replace(array('<code>', '</code>', "\r", "\n"), array('', '', '', ''), $text);
  return codefilter_fix_spaces($text);
}

/**
 * Processes chunks of escaped code into HTML.
 */
function codefilter_process_code($text) {
  // Inline or block level piece?
  $multiline = ereg("[\n\r]", $text);
  // Note, pay attention to odd preg_replace-with-/e behaviour on slashes
  $text = preg_replace("/^\n/", '', preg_replace('@</?(br|p)\s*/?>@', '', str_replace('\"', '"', $text)));
  // Trim leading and trailing linebreaks
  $text = trim($text, "\r\n");
  // Escape newlines
  $text = nl2br($text);

  // PHP code in regular code
  $text = preg_replace_callback('/&lt;\?php.+?\?&gt;/s', 'codefilter_process_php_inline', $text);

  $text = '<code>'. codefilter_fix_spaces($text) .'</code>';
  if ($multiline) $text = '<div class="codeblock">'. $text .'</div>';
  // Remove newlines to avoid clashing with the linebreak filter
  return str_replace(array("\r", "\n"), array('', ''), $text);
}

function codefilter_fix_spaces($text) {
  $text = str_replace('&nbsp;', ' ', $text);
  return str_replace('  ', '&nbsp; ', $text);
}

function codefilter_escape($text) {
  // Note, pay attention to odd preg_replace-with-/e behaviour on slashes
  return check_plain(str_replace('\"', '"', $text));
}

function codefilter_filter($op, $delta = 0, $format = -1, $text = '') {
  switch ($op) {
    case 'list':
      return array(0 => t('Code filter'));

    case 'description':
      return t('Allows users to post code verbatim using &lt;code&gt; and &lt;?php ?&gt; tags.');

    case 'prepare':
      // Note: we use the bytes 0xFE and 0xFF to replace < > during the filtering process.
      // These bytes are not valid in UTF-8 data and thus least likely to cause problems.
      $text = preg_replace('@<code>(.+?)</code>@se', "'\xFEcode\xFF'. codefilter_escape('\\1') .'\xFE/code\xFF'", $text);
      $text = preg_replace('@[\[<](\?php|%)(.+?)(\?|%)[\]>]@se', "'\xFEphp\xFF'. codefilter_escape('\\2') .'\xFE/php\xFF'", $text);
      return $text;

    case "process":
      $text = preg_replace('@\xFEcode\xFF(.+?)\xFE/code\xFF@se', "codefilter_process_code('$1')", $text);
      $text = preg_replace('@\xFEphp\xFF(.+?)\xFE/php\xFF@se', "codefilter_process_php('$1')", $text);
      return $text;

    default:
      return $text;
  }
}

?>
